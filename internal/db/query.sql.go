// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const addLanguageToSubmission = `-- name: AddLanguageToSubmission :exec
insert 
  into submission_languages 
    (submission_id, language_id)
  values 
    ($1, $2)
`

type AddLanguageToSubmissionParams struct {
	SubmissionID int32 `json:"submission_id"`
	LanguageID   int32 `json:"language_id"`
}

func (q *Queries) AddLanguageToSubmission(ctx context.Context, arg AddLanguageToSubmissionParams) error {
	_, err := q.db.Exec(ctx, addLanguageToSubmission, arg.SubmissionID, arg.LanguageID)
	return err
}

const createSubmission = `-- name: CreateSubmission :one
insert 
  into submissions 
    (name, phone, email, birth_date, bio, sex, username, password)
  values 
    ($1, $2, $3, $4, $5, $6, $7, $8)
returning id, name, phone, email, birth_date, bio, sex, created_at, username, password
`

type CreateSubmissionParams struct {
	Name      string `json:"name"`
	Phone     string `json:"phone"`
	Email     string `json:"email"`
	BirthDate string `json:"birth_date"`
	Bio       string `json:"bio"`
	Sex       int16  `json:"sex"`
	Username  string `json:"username"`
	Password  string `json:"password"`
}

func (q *Queries) CreateSubmission(ctx context.Context, arg CreateSubmissionParams) (Submission, error) {
	row := q.db.QueryRow(ctx, createSubmission,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.BirthDate,
		arg.Bio,
		arg.Sex,
		arg.Username,
		arg.Password,
	)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.BirthDate,
		&i.Bio,
		&i.Sex,
		&i.CreatedAt,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const getAllLanguages = `-- name: GetAllLanguages :many
select
  id
from
  languages
`

func (q *Queries) GetAllLanguages(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getAllLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubmissionByIdAndCredentials = `-- name: GetSubmissionByIdAndCredentials :one
select
  id
from
  submissions
where
  id = $1
  and username = $2
  and password = $3
`

type GetSubmissionByIdAndCredentialsParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) GetSubmissionByIdAndCredentials(ctx context.Context, arg GetSubmissionByIdAndCredentialsParams) (int32, error) {
	row := q.db.QueryRow(ctx, getSubmissionByIdAndCredentials, arg.ID, arg.Username, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateSubmission = `-- name: UpdateSubmission :exec
update
  submissions
set
  name = $1,
  phone = $2,
  email = $3,
  birth_date = $4,
  bio = $5,
  sex = $6
where
  id = $7
returning id, name, phone, email, birth_date, bio, sex, created_at, username, password
`

type UpdateSubmissionParams struct {
	Name      string `json:"name"`
	Phone     string `json:"phone"`
	Email     string `json:"email"`
	BirthDate string `json:"birth_date"`
	Bio       string `json:"bio"`
	Sex       int16  `json:"sex"`
	ID        int32  `json:"id"`
}

func (q *Queries) UpdateSubmission(ctx context.Context, arg UpdateSubmissionParams) error {
	_, err := q.db.Exec(ctx, updateSubmission,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.BirthDate,
		arg.Bio,
		arg.Sex,
		arg.ID,
	)
	return err
}
